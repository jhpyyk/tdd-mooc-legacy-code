describe("sellIn = 11 ", () => {
      test("quality = 50", () => {
        const brie = new Item(AGED_BRIE, 11, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(AGED_BRIE, 10, 50));
      });

      test("quality = 49", () => {
        const brie = new Item(AGED_BRIE, 11, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(AGED_BRIE, 10, 50));
      });

      test("quality = 1", () => {
        const brie = new Item(AGED_BRIE, 11, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(AGED_BRIE, 10, 2));
      });

      test("quality = 0", () => {
        const brie = new Item(AGED_BRIE, 11, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(AGED_BRIE, 10, 1));
      });


describe("sellIn = 11 ", () => {
      test("quality = 50", () => {
        const brie = new Item(BACKSTAGE_PASSES, 11, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 10, 50));
      });

      test("quality = 49", () => {
        const brie = new Item(BACKSTAGE_PASSES, 11, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 10, 50));
      });

      test("quality = 1", () => {
        const brie = new Item(BACKSTAGE_PASSES, 11, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 10, 2));
      });

      test("quality = 0", () => {
        const brie = new Item(BACKSTAGE_PASSES, 11, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 10, 1));
      });
    });

    describe("sellIn = 8 ", () => {
      test("quality = 50", () => {
        const brie = new Item(BACKSTAGE_PASSES, 8, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 7, 50));
      });

      test("quality = 49", () => {
        const brie = new Item(BACKSTAGE_PASSES, 8, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 7, 50));
      });

      test("quality = 1", () => {
        const brie = new Item(BACKSTAGE_PASSES, 8, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 7, 3));
      });

      test("quality = 0", () => {
        const brie = new Item(BACKSTAGE_PASSES, 8, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 7, 2));
      });
    });

    describe("sellIn = 6 ", () => {
      test("quality = 50", () => {
        const brie = new Item(BACKSTAGE_PASSES, 6, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 5, 50));
      });

      test("quality = 49", () => {
        const brie = new Item(BACKSTAGE_PASSES, 6, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 5, 50));
      });

      test("quality = 1", () => {
        const brie = new Item(BACKSTAGE_PASSES, 6, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 5, 3));
      });

      test("quality = 0", () => {
        const brie = new Item(BACKSTAGE_PASSES, 6, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 5, 2));
      });
    });

    describe("sellIn = 1 ", () => {
      test("quality = 50", () => {
        const brie = new Item(BACKSTAGE_PASSES, 1, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 0, 50));
      });

      test("quality = 49", () => {
        const brie = new Item(BACKSTAGE_PASSES, 1, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 0, 50));
      });

      test("quality = 1", () => {
        const brie = new Item(BACKSTAGE_PASSES, 1, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 0, 4));
      });

      test("quality = 0", () => {
        const brie = new Item(BACKSTAGE_PASSES, 1, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(BACKSTAGE_PASSES, 0, 3));
      });


    describe("sellIn = 11 ", () => {
      test("quality = 50", () => {
        const brie = new Item(FOO, 11, 50);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(FOO, 10, 49));
      });

      test("quality = 49", () => {
        const brie = new Item(FOO, 11, 49);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(FOO, 10, 48));
      });

      test("quality = 1", () => {
        const brie = new Item(FOO, 11, 1);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(FOO, 10, 0));
      });

      test("quality = 0", () => {
        const brie = new Item(FOO, 11, 0);
        const gildedRose = new Shop([brie]);
        const items = gildedRose.updateQuality();
        expect(items[0]).to.deep.equal(new Item(FOO, 10, 0));
      });
    });